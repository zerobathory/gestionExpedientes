<?php

namespace App\Http\Controllers;

use Illuminate\Support\Facades\View;
use Illuminate\Http\Request;
use App\Models\Expedientes;
use App\Models\User;
use Illuminate\Http\RedirectResponse;
/**
 * Class ExpedientesController
 *
 * Este controlador se encarga de gestionar el CRUD completo sobre los expedientes, incluyendo el de restaurar un softdelete
 *
 * @namespace App\Http\Controllers
 * 
 * 
 */

class ExpedientesController extends Controller
{
    /**
   * Método que se encarga de mostrar todos los expedientes. Utiliza el middleware can para determinar persmisos de su rol y así mostrar solo los del propio usuario o todos
   * 
   * @return Illuminate\Support\Facades\View Retorna la vista correspondiente con la colección de datos a mostrar.
   * 
   * 
   * 
   * @author Uriel Castillo
   */

    public function index()
    {
        if (auth()->user()->can('expedientes.readAll'))
         $expedientes = Expedientes::withTrashed()->get();
        elseif(auth()->user()->can('expedientes.read'))
            $expedientes = User::find(auth()->user()->id)->expedientes;

         return View::make('expedientes.index')
             ->with('expedientes', $expedientes);
    }

    /**
   * Método que se encarga de solo retornar la vista con el formulario para la creación de un nuevo expediente
   * 
   * @return Illuminate\Support\Facades\View Retorna la vista correspondiente para la creación de un nuevo expediente.
   * 
   * 
   * 
   * @author Uriel Castillo
   */
    public function create()
    {
        return View::make('expedientes.create');
    }

    /**
   * Método que se encarga de guardar en la BD el nuevo expediente
   * 
   * @return Illuminate\Http\RedirectResponse Retorna la ruta index para mostrar el resultado de la inserción.
   * 
   * 
   * 
   * @author Uriel Castillo
   */
    public function store(Request $request): RedirectResponse
    {
        if (auth()->user()->can('expedientes.create')){
            $idUltimo= Expedientes::all()->last();
            $numExpediente= ($idUltimo->numero_expediente != null || !empty($idUltimo->numero_expediente) ) ? $idUltimo->numero_expediente + 1 : 00001;
            $expedientes = Expedientes::create([
                'numero_expediente' => $numExpediente,
                'asunto' => $request->asunto,
                'fecha_inicio' => now(),
                'id_estatus' => $request->estatus,
                'id_usuario_registra' => auth()->user()->id,
            ]);

            return redirect(route('expedientes.index', absolute: false));
        }
        
    }

    /**
   * Método que se encarga de restaurar un registro con softdelete
   * 
   * @return Illuminate\Http\RedirectResponse Retorna la ruta index para mostrar el resultado de la restauración.
   * 
   * 
   * 
   * @author Uriel Castillo
   */
    public function show(string $id): RedirectResponse
    {
        if (auth()->user()->can('expedientes.restore')){
            $expediente=Expedientes::withTrashed()->find($id);

            $expediente->restore();

            return redirect(route('expedientes.index', absolute: false));
        }
    }

    /**
   * Método que se encarga de mostrar la vista con la colección de datos del expediente a editar
   * 
   * @return Illuminate\Support\Facades\View Retorna la vista con la coleccion a editar.
   * 
   * 
   * 
   * @author Uriel Castillo
   */
    public function edit(string $id)
    {
        if (auth()->user()->can('expedientes.update')){
            $expediente=Expedientes::find($id);

            return View::make('expedientes.edit')
             ->with('expediente', $expediente);
        }
    }

    /**
   * Método que se encarga de actualizar el expediente en la BD
   * 
   * @return Illuminate\Http\RedirectResponse Retorna la la ruta del index para moestrar el resultado de la actualización.
   * 
   * 
   * 
   * @author Uriel Castillo
   */
    public function update(Request $request, string $id): RedirectResponse
    {
        if (auth()->user()->can('expedientes.update')){
            $expediente=Expedientes::where('idexpedientes', $id)->first();
            $expediente->update([
                'asunto' => $request->asunto,
                'id_estatus' => $request->estatus
            ]);

            return redirect(route('expedientes.index', absolute: false));
        }
    }

    /**
   * Método que se encarga del softdelete en la base de datos
   * 
   * @return Illuminate\Http\RedirectResponse Retorna la la ruta del index para moestrar el resultado del softdelete.
   * 
   * 
   * 
   * @author Uriel Castillo
   */
    public function destroy(string $id): RedirectResponse
    {
        if (auth()->user()->can('expedientes.delete')){
            $expediente = Expedientes::find($id);

            $expediente->delete();

            return redirect(route('expedientes.index', absolute: false));
        }
        
    }
}
